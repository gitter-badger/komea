apply plugin: "sonar-runner"
apply plugin: "jacoco"

task help() {

println "---------------------------------------------------------------------------------------"
println "How to use Komea build script :                                                        "
println "HINT : To activate integration tests, relaunch gradle with the parameters -Pintegration"
println "HINT : To skip dependency check, parameter -Pnodep"
println "HINT : To overload the version, uses -Pbranch=branchName and -Pincrement=incrementNumber to release"
println "HINT : To print unit tests logs uses -PlogTest"
println "HINT : To upload to bintray , set the properties         -Dbintray_net_user= -Dbintray_net_key="

println "---------------------------------------------------------------------------------------"
}
/**
sonarRunner {
	sonarProperties {
		property "sonar.host.url", "http://192.168.1.1:9000"
		property "sonar.jdbc.url", "jdbc:mysql://192.168.1.1:3306/sonar?useUnicode=true&characterEncoding=utf8"
		property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
		property "sonar.jdbc.username", "sonar"
		property "sonar.jdbc.password", "sonar"
	}
}
**/
ext.JUNIT= "junit:junit:4.11";

//TEST FRAMEWORKS DEPENDENCIES
ext.tests_frameworks = [
	JUNIT,
	"org.mockito:mockito-all:1.9.5",
	"cglib:cglib-nodep:2.2.2",
	"org.hamcrest:hamcrest-core:1.3",
	"org.objenesis:objenesis:1.3",
	"com.carrotsearch:junit-benchmarks:0.7.2",
	'org.hamcrest:hamcrest-all:1.3'
]

ext.GIT = "git"

def getGitBranch()  {

	def gitExe = GIT

	try {
		def stdout = new ByteArrayOutputStream()
		exec {
			executable = GIT
			args = [
				'rev-parse',
				'--abbrev-ref',
				'HEAD'
			]
			standardOutput = stdout;
		}
		def currentBranch = stdout.toString().trim()

		return currentBranch;
	} catch(Exception e) {
		return "local";
	}
}





ext.VERSION_ID=KOMEAAPI_VERSION


allprojects {
	// Marker Task to enable findbugs.
	task findbugs(
			group: "Verification",
			description: """Marker task to enabled findbugs. Findbugs is by default
                        disabled. E.g. ( ./gradlew findbugs build )"""
			)
}


allprojects {



	apply plugin: "java"
	apply plugin: "maven"
	apply plugin: "eclipse"
	apply plugin: "idea"
	apply plugin: "project-report"
	apply plugin: "jacoco"
	apply plugin: 'findbugs'
	apply plugin : 'maven-publish'



	compileJava {
		//enable compilation in a separate daemon process
		options.fork = true
		sourceCompatibility = 1.6
		//enable incremental compilation
		options.incremental = true
	}




	/** CONFIGURATIONS */
	configurations { provided }

	sourceSets {
		main {
			compileClasspath += configurations.provided
			runtimeClasspath += configurations.provided
		}


		test {
			compileClasspath += configurations.provided
			runtimeClasspath += configurations.provided
		}
	}
	if (project.hasProperty("nodep")) {
		configurations.all {

			resolutionStrategy { failOnVersionConflict() }
		}
	}


	/** BRANCH AND VERSIONS */

	def BRANCH_ID = getGitBranch()
	if (project.hasProperty("branch")) {
		BRANCH_ID = project.getProperty("branch");
	}
	BRANCH_ID = BRANCH_ID.replace('/', '_').toUpperCase();

	ext.MASTER = 'MASTER'.equals(BRANCH_ID) || 'ORIGIN_MASTER'.equals(BRANCH_ID);



	if (MASTER) {
		if (project.hasProperty("increment")) {
			version = "$VERSION_ID." + project.getProperty("increment");
		} else {
			version = "$VERSION_ID-BUILD";
		}
	} else {
		version = "${VERSION_ID}-${BRANCH_ID}";
	}


	/** DEPENDENCIES */

	dependencies {
		testCompile tests_frameworks // TEST FRAMEWORKS

		testCompile(       "org.easymock:easymock:3.1") { exclude group: 'org.objenesis' }
		testRuntime 'org.apache.logging.log4j:log4j-core:2.0.2'
	}



	repositories {

		mavenLocal()
		mavenCentral()
		jcenter()

		maven {
			credentials {
				username mavenUser
				password mavenPassword
			}
			// Look for POMs and artifacts, such as JARs, here
			url "http://repo.jenkins-ci.org/public"
		}


	}




	compileJava {
		sourceCompatibility = 1.6
		targetCompatibility = 1.6
	}




	sonarRunner {
		sonarProperties {
			property "sonar.junit.reportsPath", test.reports.junitXml.destination
			property "sonar.jacoco.reportPath", "$buildDir/jacoco/jacocoTest.exec"
		}
	}

	test {
		if (project.hasProperty("logTest")) {
			// listen to events in the test execution lifecycle
			beforeTest { descriptor ->
				logger.lifecycle("Running test: " + descriptor)
			}
			// listen to standard out and standard error of the test JVM(s)
			onOutput { descriptor, event ->
				logger.lifecycle("Test: " + descriptor + " : " + event.message )
			}
			// show standard out and standard error of the test JVM(s) on the console
			testLogging.showStandardStreams = true

		}
	}
        /**
	uploadArchives.dependsOn ":build"

	uploadArchives {
		repositories {
			mavenDeployer {
				repository(url: "http://zeus.tocea:8081/nexus/content/repositories/komea")
				{
					authentication(userName: mavenUser, password: mavenPassword)
				}
				snapshotRepository(url: "http://zeus.tocea:8081/nexus/content/repositories/snapshots")
				{
					authentication(userName: mavenUser, password: mavenPassword)
				}


				pom.project {
					licenses {
						license {
							name 'LGPL licence'
							url 'http://www.tocea.com'
							distribution 'http://zeus.tocea:8081/nexus/content/repositories/komea'
						}
					}
				}
			}
		}
	}
	*âˆ•

	task print <<  { println "$rootProject.buildDir.path" }

	task "create-dirs" << {
		sourceSets*.java.srcDirs*.each { it.mkdirs() }
		sourceSets*.resources.srcDirs*.each { it.mkdirs() }
	}



	task sourceJar(type: Jar) { from sourceSets.main.allJava }

	tasks.withType(JavaCompile) { options.incremental = true }

	/** FINDBUGS -------------------------------------------------------------- */

	gradle.taskGraph.whenReady { taskGraph ->
		tasks.findbugsMain.onlyIf { taskGraph.hasTask((tasks.findbugs)) }
		tasks.findbugsTest.onlyIf { taskGraph.hasTask((tasks.findbugs)) }
	}

	findbugs {
		ignoreFailures = true
		effort = "max"

	}

	tasks. withType(FindBugs) {
		reports { xml.enabled=true }
	}


}


/**
 JACOCO
 */
task codeCoverageReport(type: JacocoReport) {

	// Gather execution data from all subprojects
	// (change this if you e.g. want to calculate unit test/integration test coverage separately)
	executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

	// Add all relevant sourcesets from the subprojects
	subprojects.each { sourceSets it.sourceSets.main }

	reports {
		xml.enabled true
		html.enabled true
		html.destination "${buildDir}/reports/jacoco"
		csv.enabled false
	}
}

// always run the tests before generating the report
codeCoverageReport.dependsOn { subprojects*.test }




/**
 Documentation
 : http://stackoverflow.com/questions/9547170/in-gradle-how-do-i-declare-common-dependencies-in-a-single-place
 : http://gradle.codehaus.org/Cookbook
 : http://stackoverflow.com/questions/8343871/mark-gradle-build-unstable-in-jenkins-when-junit-tests-fail
 */
 

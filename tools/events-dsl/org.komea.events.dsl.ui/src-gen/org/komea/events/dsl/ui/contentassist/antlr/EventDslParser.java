/*
* generated by Xtext
*/
package org.komea.events.dsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.komea.events.dsl.services.EventDslGrammarAccess;

public class EventDslParser extends AbstractContentAssistParser {
	
	@Inject
	private EventDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.komea.events.dsl.ui.contentassist.antlr.internal.InternalEventDslParser createParser() {
		org.komea.events.dsl.ui.contentassist.antlr.internal.InternalEventDslParser result = new org.komea.events.dsl.ui.contentassist.antlr.internal.InternalEventDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getEventPropertyAccess().getAlternatives(), "rule__EventProperty__Alternatives");
					put(grammarAccess.getEventFactoryAccess().getGroup(), "rule__EventFactory__Group__0");
					put(grammarAccess.getEventFactoryAccess().getGroup_0(), "rule__EventFactory__Group_0__0");
					put(grammarAccess.getEventFactoryAccess().getGroup_1(), "rule__EventFactory__Group_1__0");
					put(grammarAccess.getEventAccess().getGroup(), "rule__Event__Group__0");
					put(grammarAccess.getEventAccess().getGroup_3(), "rule__Event__Group_3__0");
					put(grammarAccess.getSimplePropertyAccess().getGroup(), "rule__SimpleProperty__Group__0");
					put(grammarAccess.getSimplePropertyAccess().getGroup_2(), "rule__SimpleProperty__Group_2__0");
					put(grammarAccess.getListPropertyAccess().getGroup(), "rule__ListProperty__Group__0");
					put(grammarAccess.getListPropertyAccess().getGroup_3(), "rule__ListProperty__Group_3__0");
					put(grammarAccess.getListPropertyAccess().getGroup_3_3(), "rule__ListProperty__Group_3_3__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getEventFactoryAccess().getPackageAssignment_0_1(), "rule__EventFactory__PackageAssignment_0_1");
					put(grammarAccess.getEventFactoryAccess().getPathAssignment_1_1(), "rule__EventFactory__PathAssignment_1_1");
					put(grammarAccess.getEventFactoryAccess().getNameAssignment_3(), "rule__EventFactory__NameAssignment_3");
					put(grammarAccess.getEventFactoryAccess().getEventsAssignment_5(), "rule__EventFactory__EventsAssignment_5");
					put(grammarAccess.getEventAccess().getNameAssignment_1(), "rule__Event__NameAssignment_1");
					put(grammarAccess.getEventAccess().getPropertiesAssignment_3_0(), "rule__Event__PropertiesAssignment_3_0");
					put(grammarAccess.getSimplePropertyAccess().getTypeAssignment_0(), "rule__SimpleProperty__TypeAssignment_0");
					put(grammarAccess.getSimplePropertyAccess().getNameAssignment_1(), "rule__SimpleProperty__NameAssignment_1");
					put(grammarAccess.getSimplePropertyAccess().getValueAssignment_2_1(), "rule__SimpleProperty__ValueAssignment_2_1");
					put(grammarAccess.getListPropertyAccess().getTypeAssignment_0(), "rule__ListProperty__TypeAssignment_0");
					put(grammarAccess.getListPropertyAccess().getNameAssignment_2(), "rule__ListProperty__NameAssignment_2");
					put(grammarAccess.getListPropertyAccess().getValuesAssignment_3_2(), "rule__ListProperty__ValuesAssignment_3_2");
					put(grammarAccess.getListPropertyAccess().getValuesAssignment_3_3_1(), "rule__ListProperty__ValuesAssignment_3_3_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.komea.events.dsl.ui.contentassist.antlr.internal.InternalEventDslParser typedParser = (org.komea.events.dsl.ui.contentassist.antlr.internal.InternalEventDslParser) parser;
			typedParser.entryRuleEventFactory();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public EventDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(EventDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}

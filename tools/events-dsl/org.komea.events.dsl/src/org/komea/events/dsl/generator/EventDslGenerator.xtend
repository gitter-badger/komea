/*
 * generated by Xtext
 */
package org.komea.events.dsl.generator

import javax.inject.Inject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractFileSystemAccess
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.komea.events.dsl.eventDsl.Event
import org.komea.events.dsl.eventDsl.EventFactory
import org.komea.events.dsl.eventDsl.EventProperty
import org.komea.events.dsl.eventDsl.ListProperty
import org.komea.events.dsl.eventDsl.SimpleProperty

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class EventDslGenerator implements IGenerator {
	
	@Inject extension EventFactoryUtils 
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		var afsa = fsa as AbstractFileSystemAccess
		var factory = resource.contents.get(0) as EventFactory
		afsa.setOutputPath(factory.factoryPath)
		afsa.generateFile(factory.factoryFile,factory.generate)
	}
	
	def  generate (EventFactory factory) '''
package «factory.factoryPackage»;

import org.komea.product.database.dto.EventSimpleDto;


public class «factory.factoryName» {
	«FOR event : factory.events»
	«event.generate»
	«ENDFOR»
}
	'''

	def  generate (Event event) '''
«val requiredProperties = event.allRequiredProperties»

/**
* Create a new «event.name» event.
*
* @param _provider provider of the event
* @param _eventType type of the event
«FOR p : requiredProperties»
* @param _«p.name» value of the «p.name» event property
«ENDFOR»
* @return a simple «event.name» event DTO
*/
public EventSimpleDto send«event.name.toFirstUpper»(String _provider, String _eventType«IF !requiredProperties.empty»,«FOR p : requiredProperties SEPARATOR ','»«p.type» _«p.name»«ENDFOR»«ENDIF») {
	EventSimpleDto event = new EventSimpleDto();
	event.setProvider(_provider);
	event.setEventType(_eventType);
	event.setProperties(new java.util.HashMap());
	«FOR property : event.properties»
	«property.generate»
	«ENDFOR»
	return event;
}

	'''
	
	
	
	def  generate (EventProperty property) '''
	event.getProperties().put("«property.name»",«property.value»);
	'''
	

	def dispatch value(EventProperty p)'''_«p.name»'''
	
	def dispatch value(SimpleProperty p)'''«IF p.value!=null»"«p.value»"«ELSE»_«p.name»«ENDIF»'''
	
	def dispatch value(ListProperty p)'''«IF !p.values.empty»"«p.values.toString»"«ELSE»_«p.name»«ENDIF»'''
	
	
	
	
//	def dispatch generateProperty (ListProperty property) '''
//	event.getProperties().put("«property.name»",«IF property.name!=null»«property.values»«ELSE»_«property.name»«ENDIF».toString());
//	'''
	
}

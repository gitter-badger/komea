import org.ajoberstar.gradle.jacoco.tasks.*

/**
 * Package of dependencies
 */

//    "ch.qos.logback:logback-classic:$LOG_LOGBACK",
//    "ch.qos.logback:logback-core:$LOG_LOGBACK",

//TEST FRAMEWORKS DEPENDENCIES
ext.tests_frameworks = [
    "junit:junit:$TEST_JUNIT",
    "org.easymock:easymock:$TEST_EASYMOCK",
    "org.mockito:mockito-core:$TEST_MOCKITO",
    "cglib:cglib-nodep:$TEST_CGLIB",
    "org.hamcrest:hamcrest-core:$TEST_HAMCREST",
    "org.objenesis:objenesis:$TEST_OBJENESIS",
    "com.carrotsearch:junit-benchmarks:$TEST_BENCH"
]


/**
 Version numbers 
 */
ext.VERSION_PRODUCT=1
ext.VERSION_MAJOR=0
description="Komea eventory"



/** GROUP ID */
ext.GROUP_ID="org.komea"


apply plugin: "sonar-runner"
apply plugin: "jacoco"


sonarRunner {
    sonarProperties {
        property "sonar.host.url", "http://192.168.1.1:9000"
        property "sonar.jdbc.url", "jdbc:mysql://192.168.1.1:3306/sonar?useUnicode=true&characterEncoding=utf8"
        property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
        property "sonar.jdbc.username", "sonar"
        property "sonar.jdbc.password", "sonar"
    }
}



/** GLOBAL PROJECT CONFIGURATION */
buildscript { repositories { mavenCentral() } }

ext.isDebug = false

allprojects {
    apply plugin: "java"
    apply plugin: "maven"
    apply plugin: "eclipse"
    apply plugin: "idea"
    apply plugin: "project-report"
    //    apply plugin: "jacoco"
    
    apply from: "$rootDir/jacoco-aggregator.gradle"
    
    
    compileJava {
        sourceCompatibility = 1.6
        targetCompatibility = 1.6
    }
   
    
    int year = Calendar.getInstance().get(Calendar.YEAR)
    int week = Calendar.getInstance().get(Calendar.WEEK_OF_YEAR)
    ext.VERSION_SPRINT="$year$week"
    group =GROUP_ID // From a env variable.
    version = "$VERSION_PRODUCT.$VERSION_MAJOR"
    if (project.hasProperty("increment")) {
        version = version + "." + project.getProperty("increment")
    } else {
        version = version + "." + VERSION_SPRINT
    }
    
    if (project.hasProperty("suffix")) {
        version += "-" + project.getProperty("suffix")
    }
    else if (!project.hasProperty("release")) {
        version += "-SNAPSHOT"
    }
    
    // Jar description in manifest
    jar {
        manifest {
            attributes "Implementation-Title": "Komea Product", "Implementation-Version": version
        }
    }
    
    
    if (isDebug) {
        tasks.withType(Compile) {
            options.debug = true
            options.compilerArgs = ["-g"]
        }
    } else {
        tasks.withType(Compile) { options.debug = false }
    }
    
    sourceSets {
        main {
            java { srcDir "src/main/java" }
            resources { srcDir "src/main/resources" }
        }
        test {
            java {  srcDir "src/test/java"  }
            resources {  srcDir "src/test/resources"  }
        }
    }
    repositories {        mavenCentral() }
    
    dependencies { testCompile tests_frameworks }
    
    uploadArchives.dependsOn ":build"
    
    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: "http://zeus:8080/nexus/content/repositories/releases")
                {
                    authentication(userName: mavenUser, password: mavenPassword)
                }
                snapshotRepository(url: "http://zeus:8080/nexus/content/repositories/snapshots")
                {
                    authentication(userName: mavenUser, password: mavenPassword)
                }
                
                
                pom.project {
                    licenses {
                        license {
                            name 'LGPL licence'
                            url 'http://www.tocea.com'
                            distribution 'http://zeus:8080/nexus/content/repositories/releases'
                        }
                    }
                }
            }
        }
    }
    
    task print <<  { println "$rootProject.buildDir.path" }
    
    task "create-dirs" << {
        sourceSets*.java.srcDirs*.each { it.mkdirs() }
        sourceSets*.resources.srcDirs*.each { it.mkdirs() }
    }
    
    dependencies { testRuntime "org.slf4j:slf4j-log4j12:1.7.6" }
    

    // coverage test with sonar and jacoco
    sonarRunner {
        sonarProperties {
          property "sonar.jacoco.reportPath", "$buildDir/tmp/jacoco.exec"
//          property "sonar.jacoco.itReportPath", "$buildDir/jacoco/jacocoIntegTest.exec"
        }
      }
}

/**
 Documentation
 : http://stackoverflow.com/questions/9547170/in-gradle-how-do-i-declare-common-dependencies-in-a-single-place
 : http://gradle.codehaus.org/Cookbook
 : http://stackoverflow.com/questions/8343871/mark-gradle-build-unstable-in-jenkins-when-junit-tests-fail
 */
